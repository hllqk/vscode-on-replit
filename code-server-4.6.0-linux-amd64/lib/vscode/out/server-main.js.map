{"version":3,"sources":["out-vscode-reh-web/server-main.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// @ts-check\n\nconst perf = require('./vs/base/common/performance');\nconst performance = require('perf_hooks').performance;\nconst product = require('../product.json');\nconst readline = require('readline');\nconst http = require('http');\n\nperf.mark('code/server/start');\n// @ts-ignore\nglobal.vscodeServerStartTime = performance.now();\n\nasync function start() {\n\tconst minimist = require('minimist');\n\n\t// Do a quick parse to determine if a server or the cli needs to be started\n\tconst parsedArgs = minimist(process.argv.slice(2), {\n\t\tboolean: ['start-server', 'list-extensions', 'print-ip-address', 'help', 'version', 'accept-server-license-terms'],\n\t\tstring: ['install-extension', 'install-builtin-extension', 'uninstall-extension', 'locate-extension', 'socket-path', 'host', 'port', 'pick-port', 'compatibility'],\n\t\talias: { help: 'h', version: 'v' }\n\t});\n\t['host', 'port', 'accept-server-license-terms'].forEach(e => {\n\t\tif (!parsedArgs[e]) {\n\t\t\tconst envValue = process.env[`VSCODE_SERVER_${e.toUpperCase().replace('-', '_')}`];\n\t\t\tif (envValue) {\n\t\t\t\tparsedArgs[e] = envValue;\n\t\t\t}\n\t\t}\n\t});\n\n\tconst extensionLookupArgs = ['list-extensions', 'locate-extension'];\n\tconst extensionInstallArgs = ['install-extension', 'install-builtin-extension', 'uninstall-extension'];\n\n\tconst shouldSpawnCli = parsedArgs.help || parsedArgs.version || extensionLookupArgs.some(a => !!parsedArgs[a]) || (extensionInstallArgs.some(a => !!parsedArgs[a]) && !parsedArgs['start-server']);\n\n\tif (shouldSpawnCli) {\n\t\tloadCode().then((mod) => {\n\t\t\tmod.spawnCli();\n\t\t});\n\t\treturn;\n\t}\n\n\tif (parsedArgs['compatibility'] === '1.63') {\n\t\tconsole.warn(`server.sh is being replaced by 'bin/${product.serverApplicationName}'. Please migrate to the new command and adopt the following new default behaviors:`);\n\t\tconsole.warn('* connection token is mandatory unless --without-connection-token is used');\n\t\tconsole.warn('* host defaults to `localhost`');\n\t}\n\n\t/**\n\t * @typedef { import('./vs/server/node/remoteExtensionHostAgentServer').IServerAPI } IServerAPI\n\t */\n\t/** @type {IServerAPI | null} */\n\tconst _remoteExtensionHostAgentServer = null;\n\t/** @type {Promise<IServerAPI> | null} */\n\tlet _remoteExtensionHostAgentServerPromise = null;\n\t/** @returns {Promise<IServerAPI>} */\n\tconst getRemoteExtensionHostAgentServer = () => {\n\t\tif (!_remoteExtensionHostAgentServerPromise) {\n\t\t\t_remoteExtensionHostAgentServerPromise = loadCode().then((mod) => mod.createServer(address));\n\t\t}\n\t\treturn _remoteExtensionHostAgentServerPromise;\n\t};\n\n\tconst http = require('http');\n\tconst os = require('os');\n\n\tif (Array.isArray(product.serverLicense) && product.serverLicense.length) {\n\t\tconsole.log(product.serverLicense.join('\\n'));\n\t\tif (product.serverLicensePrompt && parsedArgs['accept-server-license-terms'] !== true) {\n\t\t\tif (hasStdinWithoutTty()) {\n\t\t\t\tconsole.log('To accept the license terms, start the server with --accept-server-license-terms');\n\t\t\t\tprocess.exit(1);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst accept = await prompt(product.serverLicensePrompt);\n\t\t\t\tif (!accept) {\n\t\t\t\t\tprocess.exit(1);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e);\n\t\t\t\tprocess.exit(1);\n\t\t\t}\n\t\t}\n\t}\n\n\tlet firstRequest = true;\n\tlet firstWebSocket = true;\n\n\t/** @type {string | import('net').AddressInfo | null} */\n\tlet address = null;\n\tconst server = http.createServer(async (req, res) => {\n\t\tif (firstRequest) {\n\t\t\tfirstRequest = false;\n\t\t\tperf.mark('code/server/firstRequest');\n\t\t}\n\t\tconst remoteExtensionHostAgentServer = await getRemoteExtensionHostAgentServer();\n\t\treturn remoteExtensionHostAgentServer.handleRequest(req, res);\n\t});\n\tserver.on('upgrade', async (req, socket) => {\n\t\tif (firstWebSocket) {\n\t\t\tfirstWebSocket = false;\n\t\t\tperf.mark('code/server/firstWebSocket');\n\t\t}\n\t\tconst remoteExtensionHostAgentServer = await getRemoteExtensionHostAgentServer();\n\t\t// @ts-ignore\n\t\treturn remoteExtensionHostAgentServer.handleUpgrade(req, socket);\n\t});\n\tserver.on('error', async (err) => {\n\t\tconst remoteExtensionHostAgentServer = await getRemoteExtensionHostAgentServer();\n\t\treturn remoteExtensionHostAgentServer.handleServerError(err);\n\t});\n\n\tconst host = sanitizeStringArg(parsedArgs['host']) || (parsedArgs['compatibility'] !== '1.63' ? 'localhost' : undefined);\n\tconst nodeListenOptions = (\n\t\tparsedArgs['socket-path']\n\t\t\t? { path: sanitizeStringArg(parsedArgs['socket-path']) }\n\t\t\t: { host, port: await parsePort(host, sanitizeStringArg(parsedArgs['port']), sanitizeStringArg(parsedArgs['pick-port'])) }\n\t);\n\tserver.listen(nodeListenOptions, async () => {\n\t\tlet output = Array.isArray(product.serverGreeting) && product.serverGreeting.length ? `\\n\\n${product.serverGreeting.join('\\n')}\\n\\n` : ``;\n\n\t\tif (typeof nodeListenOptions.port === 'number' && parsedArgs['print-ip-address']) {\n\t\t\tconst ifaces = os.networkInterfaces();\n\t\t\tObject.keys(ifaces).forEach(function (ifname) {\n\t\t\t\tifaces[ifname].forEach(function (iface) {\n\t\t\t\t\tif (!iface.internal && iface.family === 'IPv4') {\n\t\t\t\t\t\toutput += `IP Address: ${iface.address}\\n`;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\taddress = server.address();\n\t\tif (address === null) {\n\t\t\tthrow new Error('Unexpected server address');\n\t\t}\n\n\t\toutput += `Server bound to ${typeof address === 'string' ? address : `${address.address}:${address.port} (${address.family})`}\\n`;\n\t\t// Do not change this line. VS Code looks for this in the output.\n\t\toutput += `Extension host agent listening on ${typeof address === 'string' ? address : address.port}\\n`;\n\t\tconsole.log(output);\n\n\t\tperf.mark('code/server/started');\n\t\t// @ts-ignore\n\t\tglobal.vscodeServerListenTime = performance.now();\n\n\t\tawait getRemoteExtensionHostAgentServer();\n\t});\n\n\tprocess.on('exit', () => {\n\t\tserver.close();\n\t\tif (_remoteExtensionHostAgentServer) {\n\t\t\t_remoteExtensionHostAgentServer.dispose();\n\t\t}\n\t});\n}\n/**\n * @param {any} val\n * @returns {string | undefined}\n */\nfunction sanitizeStringArg(val) {\n\tif (Array.isArray(val)) { // if an argument is passed multiple times, minimist creates an array\n\t\tval = val.pop(); // take the last item\n\t}\n\treturn typeof val === 'string' ? val : undefined;\n}\n\n/**\n * If `--pick-port` and `--port` is specified, connect to that port.\n *\n * If not and a port range is specified through `--pick-port`\n * then find a free port in that range. Throw error if no\n * free port available in range.\n *\n * If only `--port` is provided then connect to that port.\n *\n * In absence of specified ports, connect to port 8000.\n * @param {string | undefined} host\n * @param {string | undefined} strPort\n * @param {string | undefined} strPickPort\n * @returns {Promise<number>}\n * @throws\n */\nasync function parsePort(host, strPort, strPickPort) {\n\tlet specificPort;\n\tif (strPort) {\n\t\tlet range;\n\t\tif (strPort.match(/^\\d+$/)) {\n\t\t\tspecificPort = parseInt(strPort, 10);\n\t\t\tif (specificPort === 0 || !strPickPort) {\n\t\t\t\treturn specificPort;\n\t\t\t}\n\t\t} else if (range = parseRange(strPort)) {\n\t\t\tconst port = await findFreePort(host, range.start, range.end);\n\t\t\tif (port !== undefined) {\n\t\t\t\treturn port;\n\t\t\t}\n\t\t\tconsole.warn(`--port: Could not find free port in range: ${range.start} - ${range.end} (inclusive).`);\n\t\t\tprocess.exit(1);\n\n\t\t} else {\n\t\t\tconsole.warn(`--port \"${strPort}\" is not a valid number or range. Ranges must be in the form 'from-to' with 'from' an integer larger than 0 and not larger than 'end'.`);\n\t\t\tprocess.exit(1);\n\t\t}\n\t}\n\t// pick-port is deprecated and will be removed soon\n\tif (strPickPort) {\n\t\tconst range = parseRange(strPickPort);\n\t\tif (range) {\n\t\t\tif (range.start <= specificPort && specificPort <= range.end) {\n\t\t\t\treturn specificPort;\n\t\t\t} else {\n\t\t\t\tconst port = await findFreePort(host, range.start, range.end);\n\t\t\t\tif (port !== undefined) {\n\t\t\t\t\treturn port;\n\t\t\t\t}\n\t\t\t\tconsole.log(`--pick-port: Could not find free port in range: ${range.start} - ${range.end}.`);\n\t\t\t\tprocess.exit(1);\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.log(`--pick-port \"${strPickPort}\" is not a valid range. Ranges must be in the form 'from-to' with 'from' an integer larger than 0 and not larger than 'end'.`);\n\t\t\tprocess.exit(1);\n\t\t}\n\t}\n\treturn 8000;\n}\n\n/**\n * @param {string} strRange\n * @returns {{ start: number; end: number } | undefined}\n */\nfunction parseRange(strRange) {\n\tconst match = strRange.match(/^(\\d+)-(\\d+)$/);\n\tif (match) {\n\t\tconst start = parseInt(match[1], 10), end = parseInt(match[2], 10);\n\t\tif (start > 0 && start <= end && end <= 65535) {\n\t\t\treturn { start, end };\n\t\t}\n\t}\n\treturn undefined;\n}\n\n/**\n * Starting at the `start` port, look for a free port incrementing\n * by 1 until `end` inclusive. If no free port is found, undefined is returned.\n *\n * @param {string | undefined} host\n * @param {number} start\n * @param {number} end\n * @returns {Promise<number | undefined>}\n * @throws\n */\nasync function findFreePort(host, start, end) {\n\tconst testPort = (port) => {\n\t\treturn new Promise((resolve) => {\n\t\t\tconst server = http.createServer();\n\t\t\tserver.listen(port, host, () => {\n\t\t\t\tserver.close();\n\t\t\t\tresolve(true);\n\t\t\t}).on('error', () => {\n\t\t\t\tresolve(false);\n\t\t\t});\n\t\t});\n\t};\n\tfor (let port = start; port <= end; port++) {\n\t\tif (await testPort(port)) {\n\t\t\treturn port;\n\t\t}\n\t}\n\treturn undefined;\n}\n\n/** @returns { Promise<typeof import('./vs/server/node/server.main')> } */\nfunction loadCode() {\n\treturn new Promise((resolve, reject) => {\n\t\tconst path = require('path');\n\n\t\tdelete process.env['ELECTRON_RUN_AS_NODE']; // Keep bootstrap-amd.js from redefining 'fs'.\n\n\t\t// See https://github.com/microsoft/vscode-remote-release/issues/6543\n\t\t// We would normally install a SIGPIPE listener in bootstrap.js\n\t\t// But in certain situations, the console itself can be in a broken pipe state\n\t\t// so logging SIGPIPE to the console will cause an infinite async loop\n\t\tprocess.env['VSCODE_HANDLES_SIGPIPE'] = 'true';\n\n\t\tif (process.env['VSCODE_DEV']) {\n\t\t\t// When running out of sources, we need to load node modules from remote/node_modules,\n\t\t\t// which are compiled against nodejs, not electron\n\t\t\tprocess.env['VSCODE_INJECT_NODE_MODULE_LOOKUP_PATH'] = process.env['VSCODE_INJECT_NODE_MODULE_LOOKUP_PATH'] || path.join(__dirname, '..', 'remote', 'node_modules');\n\t\t\trequire('./bootstrap-node').injectNodeModuleLookupPath(process.env['VSCODE_INJECT_NODE_MODULE_LOOKUP_PATH']);\n\t\t} else {\n\t\t\tdelete process.env['VSCODE_INJECT_NODE_MODULE_LOOKUP_PATH'];\n\t\t}\n\t\trequire('./bootstrap-amd').load('vs/server/node/server.main', resolve, reject);\n\t});\n}\n\nfunction hasStdinWithoutTty() {\n\ttry {\n\t\treturn !process.stdin.isTTY; // Via https://twitter.com/MylesBorins/status/782009479382626304\n\t} catch (error) {\n\t\t// Windows workaround for https://github.com/nodejs/node/issues/11656\n\t}\n\treturn false;\n}\n\n/**\n * @param {string} question\n * @returns { Promise<boolean> }\n */\nfunction prompt(question) {\n\tconst rl = readline.createInterface({\n\t\tinput: process.stdin,\n\t\toutput: process.stdout\n\t});\n\treturn new Promise((resolve, reject) => {\n\t\trl.question(question + ' ', async function (data) {\n\t\t\trl.close();\n\t\t\tconst str = data.toString().trim().toLowerCase();\n\t\t\tif (str === '' || str === 'y' || str === 'yes') {\n\t\t\t\tresolve(true);\n\t\t\t} else if (str === 'n' || str === 'no') {\n\t\t\t\tresolve(false);\n\t\t\t} else {\n\t\t\t\tprocess.stdout.write('\\nInvalid Response. Answer either yes (y, yes) or no (n, no)\\n');\n\t\t\t\tresolve(await prompt(question));\n\t\t\t}\n\t\t});\n\t});\n}\n\n\nstart();\n"],"mappings":"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","names":[],"file":"server-main.js"}