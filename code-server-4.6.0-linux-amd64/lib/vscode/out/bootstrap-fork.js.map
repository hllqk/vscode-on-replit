{"version":3,"sources":["out-vscode-reh-web/bootstrap-fork.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n//@ts-check\n'use strict';\n\nconst performance = require('./vs/base/common/performance');\nperformance.mark('code/fork/start');\n\nconst bootstrap = require('./bootstrap');\nconst bootstrapNode = require('./bootstrap-node');\n\n// Remove global paths from the node module lookup\nbootstrapNode.removeGlobalNodeModuleLookupPaths();\n\n// Enable ASAR in our forked processes\nbootstrap.enableASARSupport();\n\nif (process.env['VSCODE_INJECT_NODE_MODULE_LOOKUP_PATH']) {\n\tbootstrapNode.injectNodeModuleLookupPath(process.env['VSCODE_INJECT_NODE_MODULE_LOOKUP_PATH']);\n}\n\n// Configure: pipe logging to parent process\nif (!!process.send && process.env['VSCODE_PIPE_LOGGING'] === 'true') {\n\tpipeLoggingToParent();\n}\n\n// Handle Exceptions\nif (!process.env['VSCODE_HANDLES_UNCAUGHT_ERRORS']) {\n\thandleExceptions();\n}\n\n// Terminate when parent terminates\nif (process.env['VSCODE_PARENT_PID']) {\n\tterminateWhenParentTerminates();\n}\n\n// Listen for message ports\nif (process.env['VSCODE_WILL_SEND_MESSAGE_PORT']) {\n\tlistenForMessagePort();\n}\n\n// Load AMD entry point\nrequire('./bootstrap-amd').load(process.env['VSCODE_AMD_ENTRYPOINT']);\n\n\n//#region Helpers\n\nfunction pipeLoggingToParent() {\n\tconst MAX_STREAM_BUFFER_LENGTH = 1024 * 1024;\n\tconst MAX_LENGTH = 100000;\n\n\t/**\n\t * Prevent circular stringify and convert arguments to real array\n\t *\n\t * @param {ArrayLike<unknown>} args\n\t */\n\tfunction safeToArray(args) {\n\t\tconst seen = [];\n\t\tconst argsArray = [];\n\n\t\t// Massage some arguments with special treatment\n\t\tif (args.length) {\n\t\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\t\tlet arg = args[i];\n\n\t\t\t\t// Any argument of type 'undefined' needs to be specially treated because\n\t\t\t\t// JSON.stringify will simply ignore those. We replace them with the string\n\t\t\t\t// 'undefined' which is not 100% right, but good enough to be logged to console\n\t\t\t\tif (typeof arg === 'undefined') {\n\t\t\t\t\targ = 'undefined';\n\t\t\t\t}\n\n\t\t\t\t// Any argument that is an Error will be changed to be just the error stack/message\n\t\t\t\t// itself because currently cannot serialize the error over entirely.\n\t\t\t\telse if (arg instanceof Error) {\n\t\t\t\t\tconst errorObj = arg;\n\t\t\t\t\tif (errorObj.stack) {\n\t\t\t\t\t\targ = errorObj.stack;\n\t\t\t\t\t} else {\n\t\t\t\t\t\targ = errorObj.toString();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\targsArray.push(arg);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tconst res = JSON.stringify(argsArray, function (key, value) {\n\n\t\t\t\t// Objects get special treatment to prevent circles\n\t\t\t\tif (isObject(value) || Array.isArray(value)) {\n\t\t\t\t\tif (seen.indexOf(value) !== -1) {\n\t\t\t\t\t\treturn '[Circular]';\n\t\t\t\t\t}\n\n\t\t\t\t\tseen.push(value);\n\t\t\t\t}\n\n\t\t\t\treturn value;\n\t\t\t});\n\n\t\t\tif (res.length > MAX_LENGTH) {\n\t\t\t\treturn 'Output omitted for a large object that exceeds the limits';\n\t\t\t}\n\n\t\t\treturn res;\n\t\t} catch (error) {\n\t\t\treturn `Output omitted for an object that cannot be inspected ('${error.toString()}')`;\n\t\t}\n\t}\n\n\t/**\n\t * @param {{ type: string; severity: string; arguments: string; }} arg\n\t */\n\tfunction safeSend(arg) {\n\t\ttry {\n\t\t\tif (process.send) {\n\t\t\t\tprocess.send(arg);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Can happen if the parent channel is closed meanwhile\n\t\t}\n\t}\n\n\t/**\n\t * @param {unknown} obj\n\t */\n\tfunction isObject(obj) {\n\t\treturn typeof obj === 'object'\n\t\t\t&& obj !== null\n\t\t\t&& !Array.isArray(obj)\n\t\t\t&& !(obj instanceof RegExp)\n\t\t\t&& !(obj instanceof Date);\n\t}\n\n\t/**\n\t *\n\t * @param {'log' | 'warn' | 'error'} severity\n\t * @param {string} args\n\t */\n\tfunction safeSendConsoleMessage(severity, args) {\n\t\tsafeSend({ type: '__$console', severity, arguments: args });\n\t}\n\n\t/**\n\t * Wraps a console message so that it is transmitted to the renderer.\n\t *\n\t * The wrapped property is not defined with `writable: false` to avoid\n\t * throwing errors, but rather a no-op setting. See https://github.com/microsoft/vscode-extension-telemetry/issues/88\n\t *\n\t * @param {'log' | 'info' | 'warn' | 'error'} method\n\t * @param {'log' | 'warn' | 'error'} severity\n\t */\n\tfunction wrapConsoleMethod(method, severity) {\n\t\tObject.defineProperty(console, method, {\n\t\t\tset: () => { },\n\t\t\tget: () => function () { safeSendConsoleMessage(severity, safeToArray(arguments)); },\n\t\t});\n\t}\n\n\t/**\n\t * Wraps process.stderr/stdout.write() so that it is transmitted to the\n\t * renderer or CLI. It both calls through to the original method as well\n\t * as to console.log with complete lines so that they're made available\n\t * to the debugger/CLI.\n\t *\n\t * @param {'stdout' | 'stderr'} streamName\n\t * @param {'log' | 'warn' | 'error'} severity\n\t */\n\tfunction wrapStream(streamName, severity) {\n\t\tconst stream = process[streamName];\n\t\tconst original = stream.write;\n\n\t\t/** @type string */\n\t\tlet buf = '';\n\n\t\tObject.defineProperty(stream, 'write', {\n\t\t\tset: () => { },\n\t\t\tget: () => (chunk, encoding, callback) => {\n\t\t\t\tbuf += chunk.toString(encoding);\n\t\t\t\tconst eol = buf.length > MAX_STREAM_BUFFER_LENGTH ? buf.length : buf.lastIndexOf('\\n');\n\t\t\t\tif (eol !== -1) {\n\t\t\t\t\tconsole[severity](buf.slice(0, eol));\n\t\t\t\t\tbuf = buf.slice(eol + 1);\n\t\t\t\t}\n\n\t\t\t\toriginal.call(stream, chunk, encoding, callback);\n\t\t\t},\n\t\t});\n\t}\n\n\t// Pass console logging to the outside so that we have it in the main side if told so\n\tif (process.env['VSCODE_VERBOSE_LOGGING'] === 'true') {\n\t\twrapConsoleMethod('info', 'log');\n\t\twrapConsoleMethod('log', 'log');\n\t\twrapConsoleMethod('warn', 'warn');\n\t\twrapConsoleMethod('error', 'error');\n\t} else {\n\t\tconsole.log = function () { /* ignore */ };\n\t\tconsole.warn = function () { /* ignore */ };\n\t\tconsole.info = function () { /* ignore */ };\n\t\twrapConsoleMethod('error', 'error');\n\t}\n\n\twrapStream('stderr', 'error');\n\twrapStream('stdout', 'log');\n}\n\nfunction handleExceptions() {\n\n\t// Handle uncaught exceptions\n\tprocess.on('uncaughtException', function (err) {\n\t\tconsole.error('Uncaught Exception: ', err);\n\t});\n\n\t// Handle unhandled promise rejections\n\tprocess.on('unhandledRejection', function (reason) {\n\t\tconsole.error('Unhandled Promise Rejection: ', reason);\n\t});\n}\n\nfunction terminateWhenParentTerminates() {\n\tconst parentPid = Number(process.env['VSCODE_PARENT_PID']);\n\n\tif (typeof parentPid === 'number' && !isNaN(parentPid)) {\n\t\tsetInterval(function () {\n\t\t\ttry {\n\t\t\t\tprocess.kill(parentPid, 0); // throws an exception if the main process doesn't exist anymore.\n\t\t\t} catch (e) {\n\t\t\t\tprocess.exit();\n\t\t\t}\n\t\t}, 5000);\n\t}\n}\n\nfunction listenForMessagePort() {\n\t// We need to listen for the 'port' event as soon as possible,\n\t// otherwise we might miss the event. But we should also be\n\t// prepared in case the event arrives late.\n\tprocess.on('port', (e) => {\n\t\tif (global.vscodePortsCallback) {\n\t\t\tglobal.vscodePortsCallback(e.ports);\n\t\t} else {\n\t\t\tglobal.vscodePorts = e.ports;\n\t\t}\n\t});\n}\n\n//#endregion\n"],"mappings":"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","names":[],"file":"bootstrap-fork.js"}